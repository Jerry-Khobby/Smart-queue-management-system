[{"id":"1726015346617","desc":"frontend","value":"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { getItem } from '../../localStorageUtils';\r\n\r\nconst AllPatients = () => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const token = getItem(\"token\");\r\n      if (!token) {\r\n        throw new Error(\"No valid token found\");\r\n      }\r\n\r\n      const response = await axios.get(\"http://localhost:8000/patients\", {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      if (response.status === 404) {\r\n        setError(\"No patients found in the database\");\r\n      } else {\r\n        setData(response.data); \r\n      } \r\n      setLoading(false);\r\n    } catch (error) {\r\n      setError(error.response?.data?.message || \"Error fetching data\");\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Function to format date for better readability\r\n  const formatDate = (dateString) => {\r\n    const options = { year: 'numeric', month: 'long', day: 'numeric' };\r\n    return new Date(dateString).toLocaleDateString(undefined, options);\r\n  };\r\n\r\n  // Function to group patients by recording date\r\n  const groupByDate = (patients) => {\r\n    return patients.reduce((groups, patient) => {\r\n      const date = formatDate(patient.recordingDate);\r\n      if (!groups[date]) {\r\n        groups[date] = [];\r\n      }\r\n      groups[date].push(patient);\r\n      return groups;\r\n    }, {});\r\n  };\r\n\r\n  const groupedPatients = groupByDate(data);\r\n\r\n  return (\r\n    <div className=\"flex flex-col min-h-screen pt-20 mx-5\">\r\n      {loading ? (\r\n        <div className=\"flex justify-center items-center min-h-screen\">\r\n          <div className=\"loader ease-linear rounded-full border-8 border-t-8 border-gray-200 h-20 w-20\"></div>\r\n        </div>\r\n      ) : error ? (\r\n        <p>Error: {error}</p>\r\n      ) : (\r\n        <div className=\"space-y-4\">\r\n          {/* Render grouped patients */}\r\n          {Object.entries(groupedPatients).map(([date, patients]) => (\r\n            <div key={date}>\r\n              {/* Heading for recording date */}\r\n              <h3 className=\"text-lg font-bold text-gray-700 mb-2\">\r\n                {date}\r\n              </h3>\r\n\r\n              {/* Render patient cards */}\r\n              <div className=\" flex-row gap-2 flex  cursor-pointer\">\r\n                {patients.map((patient) => (\r\n                  <div\r\n                    key={patient.id}\r\n                    className=\"bg-white shadow-lg rounded-lg w-24 h-24 flex items-center justify-center flex-col\"\r\n                  >\r\n                    <p className=\"text-center text-sm font-semibold\">\r\n                      {patient.insuranceNumber}\r\n                    </p>\r\n                    <p className=\"text-center text-sm font-semibold bg-blue-500 text-white rounded-full w-10 h-10 flex items-center justify-center\">\r\n                      {patient.queueNumber}\r\n                    </p>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AllPatients;\r\n","position":{"line":30,"character":24}}]